module SwParsed
  extend ActiveSupport::Concern
  COUNT = { '–Ω–∏–∫–æ–≥–æ' => 0, '–æ–¥–Ω–æ–≥–æ' => 1, '–¥–≤—É—Ö' => 2, '—Ç—Ä—ë—Ö' => 3, '—á–µ—Ç—ã—Ä—ë—Ö' => 4 }.freeze
  NAME = { 'Pied Piper' => 0, 'Hooli' => 1, 'Stark Ind.' => 2, 'Umbrella' => 3, 'Wayne Ent.' => 4 }.freeze
  NAME_SMILE = { 'üìØPied Piper' => 1, 'ü§ñHooli' => 2, '‚ö°Ô∏èStark Ind.' => 3, '‚òÇÔ∏èUmbrella' => 4, 'üé©Wayne Ent.' => 5 }.freeze

  def endurances(message)
    message['text'].scan(/üîã–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏: (\d+)%/)[0] ? (message['text'].scan(/üîã–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏: (\d+)%/)[0][0]).to_i : 0
  end

  def kill(message)
    COUNT[message['text'].scan(/(–¢–µ–±–µ –Ω–µ —É–¥–∞–ª–æ—Å—å|–¢—ã –≤—ã–Ω–µ—Å|–¢—ã –≤—ã–ø–∏–ª–∏–ª —Å—Ä–∞–∑—É|–¢–µ–±–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±–∏—Ç—å —Å—Ä–∞–∑—É|–¢—ã —É—Ä–æ–Ω–∏–ª –∞–∂) ([–∞-—è—ë]+)/)[0][1]]
  end

  def star(message)
    (message['text'].scan(/(.+)\/cool/)[0][0].length - 1) / 2
  end

  def star1(message)
    (message['text'].scan(/–ö—Ä—É—Ç–∏–∑–Ω–∞: (.+)\/cool/)[0][0].length - 1) / 2
  end

  def money(message)
    message['text'].scan(/–î–µ–Ω—å–≥–∏: (.+)\n/)[0] ? message['text'].scan(/–î–µ–Ω—å–≥–∏: (.+)\n/)[0][0].delete('$').to_i : 0
  end

  def score(message)
    message['text'].scan(/–¢–≤–æ–π –≤–∫–ª–∞–¥: (.+)\n/)[0] ? message['text'].scan(/–¢–≤–æ–π –≤–∫–ª–∞–¥: (.+)\n/)[0][0].to_i : 0
  end

  def levels(message)
    return (message['text'].scan(/üéö(\d+) \(/)[0][0]).to_i if message['text'].scan(/üéö(\d+) \(/)[0]
    return (message['text'].scan(/–£—Ä–æ–≤–µ–Ω—å: (\d+)/)[0][0]).to_i if message['text'].scan(/–£—Ä–æ–≤–µ–Ω—å: (\d+)/)[0]
  end

  def enemies(message)
    message['text'].scan(/(.+)üî®/)
  end

  def parse_report(message)
    text = message['text']
    result_str = ''

    user = User.find_or_create(message)
    username = text.scan(/(üé©|ü§ñ|‚ö°Ô∏è|‚òÇÔ∏è|üìØ)(.+) \(/)[0][1]
    if !user || (user && username != user.game_name)
      return ['–†–µ–ø–æ—Ä—Ç –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç', '–†–µ–ø–æ—Ä—Ç –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç']
    end
    user.division.update_attributes(company_id: user.company_id) if user.division.company_id.blank?
    battle_name = battle_date(message)
    battle_name2 = yesterdays_battle_date(message)
    battle_id = (user.company.battles.find_by_name(battle_name) || user.company.battles.find_by_name(battle_name2)).id
    if text.scan(/(–¢—ã –∑–∞—â–∏—â–∞–ª|–¢—ã –≤–∑–ª–∞–º—ã–≤–∞–ª) (.+)/).empty?
      return ['–†–µ–ø–æ—Ä—Ç –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –≤–ª–∞–º—ã–≤–∞–ª', '–†–µ–ø–æ—Ä—Ç –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –≤–ª–∞–º—ã–≤–∞–ª']
    end
    broked_company_id = NAME_SMILE[text.scan(/(–¢—ã –∑–∞—â–∏—â–∞–ª|–¢—ã –≤–∑–ª–∞–º—ã–≤–∞–ª) (.+)/)[0][1]]
    kill = kill(message)
    money = money(message)
    score = score(message)
    endurance = endurances(message)
    buff = buff(message, user)
    report =  user.reports.create(battle_id: battle_id, broked_company_id: broked_company_id, kill: kill, money: money, score: score, buff: buff)
    user.update_endurance(endurance)
    result_str << report.inspect
    [result_str, '–†–µ–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω']
  end

  def parse_full_profile(message)
    text = message['text']
    result_str = ''
    
    user = User.find_or_create(message)
    params = {}
    params[:game_name] = message['text'].scan(/\n\nüí∞?(.*) \(/)[0][0]
    params[:practice] = message['text'].scan(/–ü—Ä–∞–∫—Ç–∏–∫–∞:.+\((\d+)\)/)[0][0]
    params[:theory] = message['text'].scan(/–¢–µ–æ—Ä–∏—è:.+\((\d+)\)/)[0][0]
    params[:cunning] = message['text'].scan(/–•–∏—Ç—Ä–æ—Å—Ç—å:.+\((\d+)\)/)[0][0]
    params[:wisdom] = message['text'].scan(/–ú—É–¥—Ä–æ—Å—Ç—å:.+\((\d+)\)/)[0][0]
    params[:stars] = star1(message)
    params[:level] = message['text'].scan(/–£—Ä–æ–≤–µ–Ω—å: (\d+)/)[0][0]
    params[:experience] = to_int(message['text'].scan(/–û–ø—ã—Ç: (.+) –∏–∑/)[0][0])
    endurance = endurances(message)
    user.update_profile(params)
    user.update_endurance(endurance)
    result_str << user.inspect
    [result_str, '–ü—Ä–æ—Ñ–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω']
  end

  def parse_compact_profile(message)
    text = message['text']
    result_str = ''
    
    user = User.find_or_create(message)
    params = {}
    params[:game_name] = message['text'].scan(/\n\nüí∞?(.*) \(/)[0][0]
    params[:practice] = to_int(message['text'].scan(/üî®(.+)üéì/)[0][0])
    params[:theory] = to_int(message['text'].scan(/üéì(.+)/)[0][0])
    params[:cunning] = to_int(message['text'].scan(/üêø(.+)üê¢/)[0][0])
    params[:wisdom] = to_int(message['text'].scan(/üê¢(.+)/)[0][0])
    params[:stars] = star(message)
    params[:level] = message['text'].scan(/üéö(\d+) \(/)[0][0]
    params[:experience] = to_int(message['text'].scan(/\((.+) –∏–∑/)[0][0])
    endurance = message['text'].scan(/üîã(\d+)%/)[0] ? message['text'].scan(/üîã(\d+)%/)[0][0] : 0
    user.update_profile(params)
    user.update_endurance(endurance)
    result_str << user.inspect
    [result_str, '–ü—Ä–æ—Ñ–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω']
  end

  def parse_endurance(message)
    text = message['text']
    result_str = ''

    user = User.find_or_create(message)
    endurance = message['text'].scan(/üîã–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: (\d+)%/)[0][0]
    user.update_endurance(endurance)
    result_str << user.inspect
    [result_str, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ –µ–¥–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ']
  end

  private

  def practice_buff(practice, user)
    (practice.to_f / user.practice - 1) * 100 / (0.6 * (1 + user.rage * 0.2))
  end

  def theory_buff(theory, user)
    (theory.to_f / user.theory - 1) * 100 / (1.6 * (1 + user.rage * 0.2))
  end

  def buff(message, user)
    return nil unless message['text'].include?('üî®')
    return nil unless user.theory && user.practice
    current_practice = to_int(message['text'].scan(/üî®(.+)üéì/)[0][0])
    current_theory = to_int(message['text'].scan(/üéì(.+)üêø/)[0][0])
    message['text'].include?('–¢—ã –∑–∞—â–∏—â–∞–ª') ? theory_buff(current_theory, user) : practice_buff(current_practice, user)
  end

  def battle_date(message)
    Time.at(message['forward_date']).strftime('%Y-%m-%d-') + message['text'].scan(/–Ω–∞ (\d+) —á–∞—Å–æ–≤/)[0][0]
  end

  def yesterdays_battle_date(message)
    (Time.at(message['forward_date']) - 1.day).strftime('%Y-%m-%d-') + message['text'].scan(/–Ω–∞ (\d+) —á–∞—Å–æ–≤/)[0][0]
  end

  def to_int(s)
    s.delete(' ¬†').to_i
  end
end
