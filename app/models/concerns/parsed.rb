module Parsed
  extend ActiveSupport::Concern
  NAME = { 'Pied Piper' => 0, 'Hooli' => 1, 'Stark Ind.' => 2, 'Umbrella' => 3, 'Wayne Ent.' => 4 }
  COUNT = { '–Ω–∏–∫–æ–≥–æ' => 0, '–æ–¥–Ω–æ–≥–æ' => 1, '–¥–≤—É—Ö' => 2, '—Ç—Ä—ë—Ö' => 3, '—á–µ—Ç—ã—Ä—ë—Ö' => 4 }
  NAME_SMILE = { 'üìØPied Piper' => 1, 'ü§ñHooli' => 2, '‚ö°Ô∏èStark Ind.'=> 3, '‚òÇÔ∏èUmbrella' => 4, 'üé©Wayne Ent.' => 5 }

  def message_type(message)
    return :parse_battle unless message['text'].scan(/–ü–æ –∏—Ç–æ–≥–∞–º –±–∏—Ç–≤—ã/).empty?
    return :parse_stock unless message['text'].scan(/üëç–ê–∫—Ü–∏–∏ –≤—Å–µ—Ö|üëé–ù–∞ —Ä—ã–Ω–∫–µ/).empty?
    return :parse_totals unless message['text'].scan(/–†–µ–π—Ç–∏–Ω–≥ –∫–æ–º–ø–∞–Ω–∏–π –∑–∞ –¥–µ–Ω—å/).empty?
    return :parse_report if message['text'].include?('–¢–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∏—Ç–≤–µ')
    :parse_undefined
  end

  def parse(message, type)
    send(type, message)
  end

  def parse_undefined(message)
    '–Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å: ' << message['text']
  end

  def parse_totals(_message)
    '–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–º–ø–∞–Ω–∏–π –∑–∞ –¥–µ–Ω—å'
  end

  def parse_stock(message)
    text = message['text']
    result_str = ''
    prices = text.scan(/(\d+) üíµ(\n\n|.)/).map { |price| price[0].split(' ')[0] }
    name = name(message)
    Company.all.each_with_index do |company, i|
      stock = company.stocks.create(price: prices[i], name: name, at: Time.at(message['date']))
      result_str << stock.inspect
    end
    result_str
  end

  def parse_battle(message)
    text = message['text']
    result_str = ''
    monies, scores, results = [], [], []
    # –î–µ–Ω—å–≥–∏
    text.scan(/(–æ—Ç–æ–±—Ä–∞–ª–∏|—É—Ç–∞—â–∏–ª–∏|—Å–æ–±–æ–π)(.+)/).each do |substr|
      if substr[0] == '—Å–æ–±–æ–π'
        results << false
        monies << 0
        next
      end
      results << (substr[0] == '–æ—Ç–æ–±—Ä–∞–ª–∏')
      monies << ((substr[0] == '—É—Ç–∞—â–∏–ª–∏') ? -to_int(substr[1]) : to_int(substr[1]))
    end
    # –û—á–∫–∏
    text.scan(/(üé©|ü§ñ|‚ö°Ô∏è|‚òÇÔ∏è|üìØ)(.+)üèÜ/).each do |substr|
      name, score = substr[1].split('+')
      scores[NAME[name.strip]] = to_int(score)
    end
    # –ü—Ä–æ—Ü–µ–Ω—Ç—ã
    full_scores = scores.inject(0, :+)
    percent_scores = scores.map { |score| score.to_f / full_scores * 100 }
    # –£—Å–ª–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    name = name(message)
    Company.all.each_with_index do |company, i|
      battle = company.battles.create(score: scores[i], name: name, percent_score: percent_scores[i], result: results[i], money: monies[i], at: Time.at(message['date']))
      result_str << battle.inspect
    end
    result_str << parse_stock(message)
  end

  def parse_report(message)
    text = message['text']
    result_str = ''

    user = User.find_or_create(message)
    name = name2(message)
    battle_id = user.company.battles.find_by_name(name).id
    broked_company_id = NAME_SMILE[text.scan(/(–¢—ã –∑–∞—â–∏—â–∞–ª|–¢—ã –≤–∑–ª–∞–º—ã–≤–∞–ª) (.+)/)[0][1]]
    kill = COUNT[text.scan(/(–¢–µ–±–µ –Ω–µ —É–¥–∞–ª–æ—Å—å|–¢—ã –≤—ã–Ω–µ—Å|–¢—ã –≤—ã–ø–∏–ª–∏–ª —Å—Ä–∞–∑—É|–¢–µ–±–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±–∏—Ç—å —Å—Ä–∞–∑—É|–¢—ã —É—Ä–æ–Ω–∏–ª –∞–∂) ([–∞-—è]+)/)[0][1]]
    money = text.scan(/–î–µ–Ω—å–≥–∏: (.+)\n/)[0][0].delete('$').to_i
    score = text.scan(/–¢–≤–æ–π –≤–∫–ª–∞–¥: (.+)\n/)[0][0].to_i
    report =  user.reports.create(battle_id: battle_id, broked_company_id: broked_company_id, kill: kill, money: money, score: score)
    result_str << report.inspect
  end

  private

  def name(message)
    # TODO fix
    (Time.at(message['date'])+3.hours).strftime('%Y-%m-%d-%H')
  end

  def name2(message)
    Time.at(message['date']).strftime('%Y-%m-%d-')+message['text'].scan(/–Ω–∞ (\d+) —á–∞—Å–æ–≤/)[0][0]
  end

  def to_int(s)
    s.delete(' ¬†').to_i
  end
end
