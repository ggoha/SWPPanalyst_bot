module Parsed
  extend ActiveSupport::Concern

  NAME = { 'Pied Piper' => 0, 'Hooli' => 1, 'Stark Ind.' => 2, 'Umbrella' => 3, 'Wayne Ent.' => 4 }
  COUNT = { '–Ω–∏–∫–æ–≥–æ' => 0, '–æ–¥–Ω–æ–≥–æ' => 1, '–¥–≤—É—Ö' => 2, '—Ç—Ä—ë—Ö' => 3, '—á–µ—Ç—ã—Ä—ë—Ö' => 4 }
  NAME_SMILE = { 'üìØPied Piper' => 1, 'ü§ñHooli' => 2, '‚ö°Ô∏èStark Ind.'=> 3, '‚òÇÔ∏èUmbrella' => 4, 'üé©Wayne Ent.' => 5 }

  def message_type(message)
    return :parse_invite if message['new_chat_member'].present? && message['new_chat_member']['id']==Rails.application.secrets['telegram']['bots']['division']['id']
    return :parse_undefined unless message['text']
    return :parse_battle unless message['text'].scan(/–ü–æ –∏—Ç–æ–≥–∞–º –±–∏—Ç–≤—ã/).empty?
    return :parse_stock unless message['text'].scan(/üëç–ê–∫—Ü–∏–∏ –≤—Å–µ—Ö|üëé–ù–∞ —Ä—ã–Ω–∫–µ/).empty?
    return :parse_totals unless message['text'].scan(/–†–µ–π—Ç–∏–Ω–≥ –∫–æ–º–ø–∞–Ω–∏–π –∑–∞ –¥–µ–Ω—å/).empty?
    if from_SW(message)
      return :parse_report if message['text'].include?('–¢–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∏—Ç–≤–µ')
      return :parse_full_profile if message['text'].include?('–î–æ —Å–ª–µ–¥—É—é—â–µ–π –ë–∏—Ç–≤—ã')
      return :parse_compact_profile if message['text'].include?('–ë–∏—Ç–≤–∞ —á–µ—Ä–µ–∑')
      return :parse_endurance if message['text'].include?('üîã–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å:')
    end
    return :parse_bag if message['text'].include?('#SW–û—Ç–¥–µ–ª—ã–ë–∞–≥')
    return :parse_feature if message['text'].include?('#SW–û—Ç–¥–µ–ª—ã–ò–¥–µ—è')
    :parse_undefined
  end

  def parse(message, type)
    send(type, message)
  end

  def parse_undefined(message)
    '–Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å: ' << message['text']
  end

  def parse_totals(_message)
    '–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–º–ø–∞–Ω–∏–π –∑–∞ –¥–µ–Ω—å'
  end

  def parse_feature(message)
    bot.forward_message message_id: message['message_id'], from_chat_id: message['chat']['id'], chat_id: Rails.application.secrets['telegram']['me']
    respond_with :message, text: t('.parse_feature.content')
  end

  def parse_bag(message)
    bot.forward_message message_id: message['message_id'], from_chat_id: message['chat']['id'], chat_id: Rails.application.secrets['telegram']['me']
    respond_with :message, text: t('.parse_bag.content')
  end

  def parse_invite(message)
    result_str = ''
    division = Division.find_or_create(message)
    result_str << division.inspect
    result_str
  end

  def parse_stock(message)
    text = message['text']
    result_str = ''
    prices = text.scan(/(\d+) üíµ(\n\n|.)/).map { |price| price[0].split(' ')[0] }
    name = name(message)
    Company.all.each_with_index do |company, i|
      stock = company.stocks.create(price: prices[i], name: name, at: Time.at(message['date']))
      result_str << stock.inspect
    end
    result_str
  end

  def parse_battle(message)
    text = message['text']
    result_str = ''
    monies, scores, results = [], [], []
    # –î–µ–Ω—å–≥–∏
    text.scan(/(–æ—Ç–æ–±—Ä–∞–ª–∏|—É—Ç–∞—â–∏–ª–∏|—Å–æ–±–æ–π)(.+)/).each do |substr|
      if substr[0] == '—Å–æ–±–æ–π'
        results << false
        monies << 0
        next
      end
      results << (substr[0] == '–æ—Ç–æ–±—Ä–∞–ª–∏')
      monies << ((substr[0] == '—É—Ç–∞—â–∏–ª–∏') ? -to_int(substr[1]) : to_int(substr[1]))
    end
    # –û—á–∫–∏
    text.scan(/(üé©|ü§ñ|‚ö°Ô∏è|‚òÇÔ∏è|üìØ)(.+)üèÜ/).each do |substr|
      name, score = substr[1].split('+')
      scores[NAME[name.strip]] = to_int(score)
    end
    # –ü—Ä–æ—Ü–µ–Ω—Ç—ã
    full_scores = scores.inject(0, :+)
    percent_scores = scores.map { |score| score.to_f / full_scores * 100 }
    # –£—Å–ª–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    name = name(message)
    Company.all.each_with_index do |company, i|
      battle = company.battles.create(score: scores[i], name: name, percent_score: percent_scores[i], result: results[i], money: monies[i], at: Time.at(message['date']))
      result_str << battle.inspect
    end
    result_str << parse_stock(message)
  end

  def parse_report(message)
    text = message['text']
    result_str = ''

    user = User.find_or_create(message)
    user.division.update_attributes(company_id: user.company_id) if user.division.company_id.blank?
    name = name2(message)
    name2 = name3(message)
    battle_id = (user.company.battles.find_by_name(name) || user.company.battles.find_by_name(name2) ).id
    broked_company_id = NAME_SMILE[text.scan(/(–¢—ã –∑–∞—â–∏—â–∞–ª|–¢—ã –≤–∑–ª–∞–º—ã–≤–∞–ª) (.+)/)[0][1]]
    kill = COUNT[text.scan(/(–¢–µ–±–µ –Ω–µ —É–¥–∞–ª–æ—Å—å|–¢—ã –≤—ã–Ω–µ—Å|–¢—ã –≤—ã–ø–∏–ª–∏–ª —Å—Ä–∞–∑—É|–¢–µ–±–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±–∏—Ç—å —Å—Ä–∞–∑—É|–¢—ã —É—Ä–æ–Ω–∏–ª –∞–∂) ([–∞-—è—ë]+)/)[0][1]]
    money = text.scan(/–î–µ–Ω—å–≥–∏: (.+)\n/)[0][0].delete('$').to_i
    score = text.scan(/–¢–≤–æ–π –≤–∫–ª–∞–¥: (.+)\n/)[0][0].to_i
    endurance = text.scan(/üîã–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏: (\d+)%/)[0][0]
    buff = buff(message, user)
    report =  user.reports.create(battle_id: battle_id, broked_company_id: broked_company_id, kill: kill, money: money, score: score, buff: buff)
    user.update_endurance(endurance)
    result_str << report.inspect
    [result_str, '–†–µ–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω']
  end

  def parse_full_profile(message)
    text = message['text']
    result_str = ''
    
    user = User.find_or_create(message)
    params = {}
    params[:practice] = message['text'].scan(/–ü—Ä–∞–∫—Ç–∏–∫–∞:.+\((\d+)\)/)[0][0]
    params[:theory] = message['text'].scan(/–¢–µ–æ—Ä–∏—è:.+\((\d+)\)/)[0][0]
    params[:cunning] = message['text'].scan(/–•–∏—Ç—Ä–æ—Å—Ç—å:.+\((\d+)\)/)[0][0]
    params[:wisdom] = message['text'].scan(/–ú—É–¥—Ä–æ—Å—Ç—å:.+\((\d+)\)/)[0][0]
    params[:stars] = (message['text'].scan(/–ö—Ä—É—Ç–∏–∑–Ω–∞: (.+)\/cool/)[0][0].length - 1) / 2
    params[:level] = message['text'].scan(/–£—Ä–æ–≤–µ–Ω—å: (\d+)/)[0][0]
    params[:experience] = to_int(message['text'].scan(/–û–ø—ã—Ç: (.+) –∏–∑/)[0][0])
    endurance = message['text'].scan(/–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: (\d+)%/)[0][0]
    user.update_profile(params)
    user.update_endurance(endurance)
    result_str << user.inspect
    [result_str, '–ü—Ä–æ—Ñ–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω']
  end

  def parse_compact_profile(message)
    text = message['text']
    result_str = ''
    
    user = User.find_or_create(message)
    params = {}
    params[:practice] = to_int(message['text'].scan(/üî®(.+)üéì/)[0][0])
    params[:theory] = to_int(message['text'].scan(/üéì(.+)/)[0][0])
    params[:cunning] = to_int(message['text'].scan(/üêø(.+)üê¢/)[0][0])
    params[:wisdom] = to_int(message['text'].scan(/üê¢(.+)/)[0][0])
    params[:stars] = (message['text'].scan(/(.+)\/cool/)[0][0].length - 1) / 2
    params[:level] = message['text'].scan(/üéö(\d+) \(/)[0][0]
    params[:experience] = to_int(message['text'].scan(/\((.+) –∏–∑/)[0][0])
    endurance = message['text'].scan(/üîã(\d+)%/)[0][0]
    user.update_profile(params)
    user.update_endurance(endurance)
    result_str << user.inspect
    [result_str, '–ü—Ä–æ—Ñ–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω']
  end

  def parse_endurance(message)
    text = message['text']
    result_str = ''

    user = User.find_or_create(message)
    endurance = message['text'].scan(/üîã–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: (\d+)%/)[0][0]
    user.update_endurance(endurance)
    result_str << user.inspect
    [result_str, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ –µ–¥–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ']
  end

  private

  def buff(message, user)
    return nil unless message['text'].include?('üî®')
    return nil unless user.theory && user.practice
    current_practice = to_int(message['text'].scan(/üî®(.+)üéì/)[0][0])
    current_theory = to_int(message['text'].scan(/üéì(.+)üêø/)[0][0])
    message['text'].include?('–¢—ã –∑–∞—â–∏—â–∞–ª') ? (current_theory.to_f/user.theory-1)*100/(1.6*(1+user.rage*0.2)) : (current_practice.to_f/user.practice-1)*100/(0.6*(1+user.rage*0.2))
  end

  def name(message)
    # TODO fix
    (Time.at(message['date'])+3.hours).strftime('%Y-%m-%d-%H')
  end

  def name2(message)
    Time.at(message['forward_date']).strftime('%Y-%m-%d-')+message['text'].scan(/–Ω–∞ (\d+) —á–∞—Å–æ–≤/)[0][0]
  end

  def name3(message)
    (Time.at(message['forward_date'])-1.day).strftime('%Y-%m-%d-')+message['text'].scan(/–Ω–∞ (\d+) —á–∞—Å–æ–≤/)[0][0]
  end

  def to_int(s)
    s.delete(' ¬†').to_i
  end

  def from_SW(message)
    message['forward_from'] && 
    (message['forward_from']['id'] == Rails.application.secrets['telegram']['SW'] ||
    message['forward_from']['id'] == Rails.application.secrets['telegram']['SW1'] )
  end
end
